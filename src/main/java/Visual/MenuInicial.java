/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visual;


import Assets.Carta;
import Assets.CartasTotal;
import Estructuras_Datos.CList.CircularList;
import Estructuras_Datos.CList.Node;
import Estructuras_Datos.Cola.Cola;
import JsonPackage.Json;
import Sockets.Client;
import Sockets.EnvioCarta;
import Sockets.Mensaje;
import Sockets.Server;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Observable;
import java.util.Observer;
import java.util.Random;
import javax.swing.*;

/**
 *
 * @author sebas
 */
public class MenuInicial extends JFrame implements Observer {
    //variables del user
    String username;
    int miPuerto;
    String miIP;
    int usuariosConectados = 0;
    Boolean cliente = false;
    Boolean poderSupremo = false;
    int contadorSupremo = 0;
    int congelar = 0;
    {
        try {
            miIP = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
    }

    //variables del oponente
    String opUs;
    int opPort;
    String opIP;

    // variables de jugabilidad
    int miVida = 1000;
    int miMana = 1000;

    //variables del mazo
    CartasTotal cartasTotal = new CartasTotal();
    Cola mazo = new Cola();
    CircularList mano = new CircularList();
    Node cartaSelec;
    String rutaC = "img//cartas//";


    /**
     * Creates new form MenuInicial
     */
    public MenuInicial(){
        initComponents();

        Server servidor = new Server();
        servidor.addObserver(this);
        Thread serverT = new Thread(servidor);
        serverT.start();
        this.miPuerto = servidor.getPort();
        puertoField_lobby.setText(String.valueOf(this.miPuerto));
        try {
            cargarCartas();
            setCartaImage();
        } catch (IOException e) {
            e.printStackTrace();
        }
        setTurno(false);
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        pantallas = new javax.swing.JTabbedPane();
        javax.swing.JPanel MenuInicial = new javax.swing.JPanel();
        monsterName_menu = new javax.swing.JLabel();
        nombreField = new javax.swing.JTextField();
        nombreText = new javax.swing.JLabel();
        unirseBoton = new javax.swing.JButton();
        lobbyBoton = new javax.swing.JButton();
        salirBoton_menu = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        monsterName_unirse = new javax.swing.JLabel();
        ipField_unirse = new javax.swing.JTextField();
        puertoField_unirse = new javax.swing.JTextField();
        ipLobbyText_unirse = new javax.swing.JLabel();
        puertoLobbyText_unirse = new javax.swing.JLabel();
        unirseBoton_unirse = new javax.swing.JButton();
        salirMenuBoton_unirse = new javax.swing.JButton();
        salirBoton_unirse = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jugadoresConectadosPanel = new javax.swing.JPanel();
        jugadoresConectadosText = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jugadoresConectadosTextArea_lobby = new javax.swing.JTextArea();
        monsterName_lobby = new javax.swing.JLabel();
        lobbyText_lobby = new javax.swing.JLabel();
        ipField_lobby = new javax.swing.JTextField();
        puertoField_lobby = new javax.swing.JTextField();
        ipText_lobby = new javax.swing.JLabel();
        puertoText_lobby = new javax.swing.JLabel();
        iniciarBoton_lobby = new javax.swing.JButton();
        salirMenuBoton_lobby = new javax.swing.JButton();
        salirBoton_lobby = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cartaBoton = new javax.swing.JButton();
        adelanteBoton = new javax.swing.JButton();
        atrasBoton = new javax.swing.JButton();
        vidaText = new javax.swing.JLabel();
        vidaBar = new javax.swing.JProgressBar();
        mazoBoton = new javax.swing.JButton();
        salirMenuBoton_juego = new javax.swing.JButton();
        salirBoton_juego = new javax.swing.JButton();
        pasarTurnoBoton = new javax.swing.JButton();
        manaField = new javax.swing.JTextField();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        pantallas.setBackground(new java.awt.Color(147, 82, 83));

        MenuInicial.setBackground(new java.awt.Color(56, 1, 6));
        MenuInicial.setToolTipText("");

        monsterName_menu.setFont(new java.awt.Font("Viner Hand ITC", 3, 70)); // NOI18N
        monsterName_menu.setForeground(new java.awt.Color(12, 122, 16));
        monsterName_menu.setText("MONSTER TECG");

        nombreField.setFont(new java.awt.Font("Microsoft YaHei UI Light", 3, 14)); // NOI18N
        nombreField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreFieldActionPerformed(evt);
            }
        });

        nombreText.setBackground(new java.awt.Color(102, 204, 0));
        nombreText.setFont(new java.awt.Font("Microsoft YaHei UI Light", 3, 24)); // NOI18N
        nombreText.setForeground(new java.awt.Color(12, 122, 16));
        nombreText.setText("Escribe tu nombre");

        unirseBoton.setFont(new java.awt.Font("Microsoft YaHei UI Light", 0, 12)); // NOI18N
        unirseBoton.setText("Unirse");
        unirseBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unirseBotonActionPerformed(evt);
            }
        });

        lobbyBoton.setFont(new java.awt.Font("Microsoft YaHei UI Light", 0, 12)); // NOI18N
        lobbyBoton.setText("Crear Lobby");
        lobbyBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lobbyBotonActionPerformed(evt);
            }
        });

        salirBoton_menu.setFont(salirMenuBoton_lobby.getFont());
        salirBoton_menu.setText("Salir");
        salirBoton_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirBoton_menuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MenuInicialLayout = new javax.swing.GroupLayout(MenuInicial);
        MenuInicial.setLayout(MenuInicialLayout);
        MenuInicialLayout.setHorizontalGroup(
            MenuInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuInicialLayout.createSequentialGroup()
                .addGroup(MenuInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MenuInicialLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(salirBoton_menu))
                    .addGroup(MenuInicialLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(nombreField, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nombreText, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(630, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuInicialLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(MenuInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuInicialLayout.createSequentialGroup()
                        .addComponent(unirseBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(134, 134, 134))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuInicialLayout.createSequentialGroup()
                        .addComponent(monsterName_menu, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(223, 223, 223))))
            .addGroup(MenuInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(MenuInicialLayout.createSequentialGroup()
                    .addGap(161, 161, 161)
                    .addComponent(lobbyBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(749, Short.MAX_VALUE)))
        );
        MenuInicialLayout.setVerticalGroup(
            MenuInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuInicialLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(monsterName_menu, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75)
                .addGroup(MenuInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreText)
                    .addComponent(nombreField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 233, Short.MAX_VALUE)
                .addComponent(unirseBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84)
                .addComponent(salirBoton_menu)
                .addGap(56, 56, 56))
            .addGroup(MenuInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuInicialLayout.createSequentialGroup()
                    .addContainerGap(450, Short.MAX_VALUE)
                    .addComponent(lobbyBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(163, 163, 163)))
        );

        pantallas.addTab("tab1", MenuInicial);

        jPanel2.setBackground(new java.awt.Color(56, 1, 6));

        monsterName_unirse.setFont(monsterName_menu.getFont());
        monsterName_unirse.setForeground(monsterName_menu.getForeground());
        monsterName_unirse.setText("MONSTER TECG");

        ipField_unirse.setFont(nombreField.getFont());

        puertoField_unirse.setFont(nombreField.getFont());

        ipLobbyText_unirse.setFont(nombreText.getFont());
        ipLobbyText_unirse.setForeground(new java.awt.Color(12, 122, 16));
        ipLobbyText_unirse.setText("Escriba iP del Lobby");

        puertoLobbyText_unirse.setFont(new java.awt.Font("Microsoft YaHei UI Light", 3, 24)); // NOI18N
        puertoLobbyText_unirse.setForeground(new java.awt.Color(12, 122, 16));
        puertoLobbyText_unirse.setText("Escriba puerto del Lobby");

        unirseBoton_unirse.setFont(unirseBoton.getFont());
        unirseBoton_unirse.setText("Unirse");
        unirseBoton_unirse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unirseBoton_unirseActionPerformed(evt);
            }
        });

        salirMenuBoton_unirse.setFont(unirseBoton.getFont());
        salirMenuBoton_unirse.setText("Menu Principal");
        salirMenuBoton_unirse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirMenuBoton_unirseActionPerformed(evt);
            }
        });

        salirBoton_unirse.setFont(salirBoton_menu.getFont());
        salirBoton_unirse.setText("Salir");
        salirBoton_unirse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirBoton_unirseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(ipField_unirse, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(puertoField_unirse, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(135, 135, 135))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(ipLobbyText_unirse, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 387, Short.MAX_VALUE)
                .addComponent(puertoLobbyText_unirse, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(salirMenuBoton_unirse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(salirBoton_unirse)
                .addGap(33, 33, 33))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(407, 407, 407)
                        .addComponent(unirseBoton_unirse, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addComponent(monsterName_unirse)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(monsterName_unirse)
                .addGap(64, 64, 64)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(puertoField_unirse, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ipField_unirse, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipLobbyText_unirse)
                    .addComponent(puertoLobbyText_unirse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(unirseBoton_unirse, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(221, 221, 221)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(salirMenuBoton_unirse)
                    .addComponent(salirBoton_unirse))
                .addGap(65, 65, 65))
        );

        pantallas.addTab("tab2", jPanel2);

        jPanel3.setBackground(new java.awt.Color(56, 1, 6));

        jugadoresConectadosPanel.setBackground(new java.awt.Color(56, 1, 6));

        jugadoresConectadosText.setFont(new java.awt.Font("Microsoft YaHei UI Light", 3, 14)); // NOI18N
        jugadoresConectadosText.setForeground(new java.awt.Color(12, 122, 16));
        jugadoresConectadosText.setText("Jugadores conectados:");

        jugadoresConectadosTextArea_lobby.setEditable(false);
        jugadoresConectadosTextArea_lobby.setBackground(jPanel2.getBackground());
        jugadoresConectadosTextArea_lobby.setColumns(20);
        jugadoresConectadosTextArea_lobby.setFont(jugadoresConectadosText.getFont());
        jugadoresConectadosTextArea_lobby.setForeground(new java.awt.Color(12, 122, 16));
        jugadoresConectadosTextArea_lobby.setRows(5);
        jScrollPane2.setViewportView(jugadoresConectadosTextArea_lobby);

        javax.swing.GroupLayout jugadoresConectadosPanelLayout = new javax.swing.GroupLayout(jugadoresConectadosPanel);
        jugadoresConectadosPanel.setLayout(jugadoresConectadosPanelLayout);
        jugadoresConectadosPanelLayout.setHorizontalGroup(
            jugadoresConectadosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jugadoresConectadosPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jugadoresConectadosText, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );
        jugadoresConectadosPanelLayout.setVerticalGroup(
            jugadoresConectadosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jugadoresConectadosPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jugadoresConectadosText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(421, Short.MAX_VALUE))
        );

        monsterName_lobby.setFont(new java.awt.Font("Viner Hand ITC", 3, 55)); // NOI18N
        monsterName_lobby.setForeground(monsterName_unirse.getForeground());
        monsterName_lobby.setText("MONSTER TECG");

        lobbyText_lobby.setBackground(monsterName_menu.getForeground());
        lobbyText_lobby.setFont(new java.awt.Font("Viner Hand ITC", 3, 30)); // NOI18N
        lobbyText_lobby.setForeground(monsterName_menu.getForeground());
        lobbyText_lobby.setText("LOBBY");

        ipField_lobby.setEditable(false);
        ipField_lobby.setFont(nombreField.getFont());

        puertoField_lobby.setEditable(false);
        puertoField_lobby.setFont(nombreField.getFont());

        ipText_lobby.setFont(nombreText.getFont());
        ipText_lobby.setForeground(new java.awt.Color(12, 122, 16));
        ipText_lobby.setText("iP del Lobby");

        puertoText_lobby.setFont(nombreText.getFont());
        puertoText_lobby.setForeground(new java.awt.Color(12, 122, 16));
        puertoText_lobby.setText("Puerto del Lobby");

        iniciarBoton_lobby.setFont(unirseBoton.getFont());
        iniciarBoton_lobby.setText("Iniciar Partida");
        iniciarBoton_lobby.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarBoton_lobbyActionPerformed(evt);
            }
        });

        salirMenuBoton_lobby.setFont(salirMenuBoton_unirse.getFont());
        salirMenuBoton_lobby.setText("Menu Principal");
        salirMenuBoton_lobby.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirMenuBoton_lobbyActionPerformed(evt);
            }
        });

        salirBoton_lobby.setFont(salirBoton_menu.getFont());
        salirBoton_lobby.setText("Salir");
        salirBoton_lobby.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirBoton_lobbyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(salirMenuBoton_lobby)
                        .addGap(371, 371, 371)
                        .addComponent(salirBoton_lobby)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 272, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(ipText_lobby, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(puertoText_lobby, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(ipField_lobby, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(puertoField_lobby, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(monsterName_lobby)
                                .addGap(182, 182, 182))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(iniciarBoton_lobby, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lobbyText_lobby))
                                .addGap(348, 348, 348)))))
                .addComponent(jugadoresConectadosPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jugadoresConectadosPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(81, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(monsterName_lobby)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lobbyText_lobby, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(puertoField_lobby)
                    .addComponent(ipField_lobby, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipText_lobby)
                    .addComponent(puertoText_lobby))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(iniciarBoton_lobby, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(190, 190, 190)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(salirMenuBoton_lobby)
                    .addComponent(salirBoton_lobby))
                .addGap(77, 77, 77))
        );

        try{
            ipField_lobby.setText(InetAddress.getLocalHost().getHostAddress());
        }

        catch (IOException e){
            e.getMessage();
        }
        puertoField_lobby.setText(String.valueOf(miPuerto));

        pantallas.addTab("tab3", jPanel3);

        jPanel1.setBackground(new java.awt.Color(56, 1, 6));
        jPanel1.setToolTipText("");

        jLabel1.setFont(nombreText.getFont());
        jLabel1.setForeground(new java.awt.Color(12, 122, 16));
        jLabel1.setText("Mana");

        cartaBoton.setBackground(new java.awt.Color(56, 1, 6));
        cartaBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cartaBotonActionPerformed(evt);
            }
        });

        adelanteBoton.setFont(lobbyBoton.getFont());
        adelanteBoton.setText("Adelante");
        adelanteBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adelanteBotonActionPerformed(evt);
            }
        });

        atrasBoton.setFont(salirBoton_lobby.getFont());
        atrasBoton.setText("Atras");
        atrasBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atrasBotonActionPerformed(evt);
            }
        });

        vidaText.setFont(nombreText.getFont());
        vidaText.setForeground(new java.awt.Color(12, 122, 16));
        vidaText.setText("Vida");

        vidaBar.setBackground(new java.awt.Color(255, 0, 0));
        vidaBar.setMaximum(1000);

        mazoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mazoBotonActionPerformed(evt);
            }
        });

        salirMenuBoton_juego.setFont(atrasBoton.getFont());
        salirMenuBoton_juego.setText("Menu Inicial");
        salirMenuBoton_juego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirMenuBoton_juegoActionPerformed(evt);
            }
        });

        salirBoton_juego.setFont(adelanteBoton.getFont());
        salirBoton_juego.setText("Salir");
        salirBoton_juego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirBoton_juegoActionPerformed(evt);
            }
        });

        pasarTurnoBoton.setFont(iniciarBoton_lobby.getFont());
        pasarTurnoBoton.setText("Pasar turno");
        pasarTurnoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasarTurnoBotonActionPerformed(evt);
            }
        });

        manaField.setEditable(false);
        manaField.setFont(ipField_lobby.getFont());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(atrasBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(vidaBar, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(vidaText, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(manaField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(cartaBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(adelanteBoton, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addComponent(pasarTurnoBoton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(101, 101, 101)
                .addComponent(mazoBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(salirMenuBoton_juego)
                .addGap(37, 37, 37)
                .addComponent(salirBoton_juego)
                .addGap(35, 35, 35))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(215, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(atrasBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(119, 119, 119)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(vidaBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(vidaText)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(adelanteBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100)
                                .addComponent(pasarTurnoBoton)
                                .addGap(25, 25, 25))
                            .addComponent(cartaBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(mazoBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(manaField)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salirMenuBoton_juego)
                    .addComponent(salirBoton_juego))
                .addGap(23, 23, 23))
        );

        vidaBar.setValue(miVida);
        mazoBoton.setIcon(new ImageIcon(this.rutaC +  "back.png"));

        pantallas.addTab("tab4", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pantallas, javax.swing.GroupLayout.PREFERRED_SIZE, 1100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pantallas, javax.swing.GroupLayout.PREFERRED_SIZE, 689, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void unirseBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unirseBotonActionPerformed
        // TODO add your handling code here:
        if("".equals(nombreField.getText())){
            JOptionPane.showMessageDialog(pantallas, "Por favor introducir su nombre..." );
        }
        else{
            pantallas.setSelectedIndex(1);
            this.cliente = true;
            this.username = nombreField.getText();
            iniciarBoton_lobby.setVisible(false);

        }
    }//GEN-LAST:event_unirseBotonActionPerformed

    private void lobbyBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lobbyBotonActionPerformed
        // TODO add your handling code here:
        if ("".equals(nombreField.getText())){
            JOptionPane.showMessageDialog(pantallas, "Por favor introducir su nombre..." );
        }
        else{
            puertoField_lobby.setText(String.valueOf(miPuerto));
            iniciarBoton_lobby.setVisible(true);
            this.username = nombreField.getText();
            usuariosConectados ++;
            System.out.println("Cantidad de jugadores conectados : " + usuariosConectados);
            pantallas.setSelectedIndex(2);
            jugadoresConectadosTextArea_lobby.append(this.username + " (host)" + "\n");
        }
    }//GEN-LAST:event_lobbyBotonActionPerformed

    private void unirseBoton_unirseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unirseBoton_unirseActionPerformed
        // TODO add your handling code here:
        if("".equals(puertoField_unirse.getText()) || "".equals(ipField_unirse.getText())){
            JOptionPane.showMessageDialog(pantallas, "Por favor introducir iP y puerto del Lobby");
        }
        else{
            this.opPort = Integer.parseInt(puertoField_unirse.getText());
            this.opIP = ipField_unirse.getText();
            Mensaje conectar = new Mensaje(this.miIP, this.miPuerto, this.username,1,true);
            jugadoresConectadosTextArea_lobby.append(this.username + "\n");

            EnvioJson(conectar);
            puertoField_lobby.setText(String.valueOf(opPort));
            pantallas.setSelectedIndex(2);
        }
    }//GEN-LAST:event_unirseBoton_unirseActionPerformed

    private void salirMenuBoton_unirseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirMenuBoton_unirseActionPerformed
        // TODO add your handling code here:
        pantallas.setSelectedIndex(0);
        cliente = false;
    }//GEN-LAST:event_salirMenuBoton_unirseActionPerformed

    private void salirMenuBoton_lobbyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirMenuBoton_lobbyActionPerformed
        // TODO add your handling code here:
        int salir = JOptionPane.showConfirmDialog(null, "¿Estas seguro que quieres desconectarte?");
        switch(salir){
            case JOptionPane.YES_OPTION:
                if(cliente == true){
                    Mensaje desconectar = new Mensaje(null, 0, null, 2, false);
                    EnvioJson(desconectar);
                    jugadoresConectadosTextArea_lobby.setText("");
                    pantallas.setSelectedIndex(0);
                    this.opIP = null;
                    this.opPort = 0;
                    setTurno(false);
                }
                else{
                    if (this.usuariosConectados == 2) {
                        jugadoresConectadosTextArea_lobby.setText("");

                        usuariosConectados = 0;
                        Mensaje desconectar = new Mensaje(null, 0, null, 3, false);
                        EnvioJson(desconectar);
                        pantallas.setSelectedIndex(0);
                        this.opIP = null;
                        this.opPort = 0;
                        cliente = false;
                    }else{
                        jugadoresConectadosTextArea_lobby.setText("");
                        iniciarBoton_lobby.setVisible(false);
                        pantallas.setSelectedIndex(0);
                        cliente = false;
                    }
                }

            case JOptionPane.NO_OPTION:
                break;
        }
    }//GEN-LAST:event_salirMenuBoton_lobbyActionPerformed

    private void salirBoton_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirBoton_menuActionPerformed
        // TODO add your handling code here:
        int salir = JOptionPane.showConfirmDialog(null, "¿Estas seguro que quieres salir del juego?");
        switch(salir){
            case JOptionPane.YES_OPTION:
                System.exit(0);
                
            case JOptionPane.NO_OPTION:
                break;
        }
    }//GEN-LAST:event_salirBoton_menuActionPerformed

    private void salirBoton_unirseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirBoton_unirseActionPerformed
        // TODO add your handling code here:
        int salir = JOptionPane.showConfirmDialog(null, "¿Estas seguro que quieres salir del juego?");
        switch(salir){
            case JOptionPane.YES_OPTION:
                System.exit(0);
                
            case JOptionPane.NO_OPTION:
                break;
        }
    }//GEN-LAST:event_salirBoton_unirseActionPerformed

    private void salirBoton_lobbyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirBoton_lobbyActionPerformed
        // TODO add your handling code here:
        int salir = JOptionPane.showConfirmDialog(null, "¿Estas seguro que quieres salir del juego?");
        switch(salir){
            case JOptionPane.YES_OPTION:
                System.exit(0);
                
            case JOptionPane.NO_OPTION:
                break;
        }
    }//GEN-LAST:event_salirBoton_lobbyActionPerformed

    private void nombreFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreFieldActionPerformed

    private void iniciarBoton_lobbyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarBoton_lobbyActionPerformed
        // TODO add your handling code here:
        if(usuariosConectados == 2){
            Mensaje inicio = new Mensaje(null, 0, this.username, 4, false);
            EnvioJson(inicio);
            setTurno(true);
            pantallas.setSelectedIndex(3);
        }
        
        else{
            JOptionPane.showMessageDialog(pantallas, "Debe haber dos jugadores para poder iniciar la partida..." );
        }
    }//GEN-LAST:event_iniciarBoton_lobbyActionPerformed

    private void adelanteBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adelanteBotonActionPerformed
        // TODO add your handling code here:

        if(this.cartaSelec != null) {
            this.cartaSelec = this.mano.getCartaNext();
            setCartaImage();
            System.out.println("Carta: "+this.cartaSelec.getObject());
        }else{
            System.out.println("Carta: NUll");
        }
    }//GEN-LAST:event_adelanteBotonActionPerformed

    private void cartaBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cartaBotonActionPerformed
        // TODO add your handling code here:
        int especial = 0;

        if(this.cartaSelec !=  null) {
            if (this.miMana >= this.cartaSelec.getObject().getMana()) {
                if (this.poderSupremo == false) {
                    especial = 0;
                    if (this.congelar == 1){
                        this.congelar = 0;
                        JOptionPane.showMessageDialog(pantallas, "Se ha acabado tu turno extra...");
                        setTurno(false);
                    }
                    System.out.println("Poder supremo falso");
                } else {
                    System.out.println("Poder supremo true");
                    if (this.contadorSupremo == 0) {
                        this.contadorSupremo += 3;
                        this.poderSupremo = false;
                        JOptionPane.showMessageDialog(pantallas, "Tus 3 turnos del poder supremo han acabado...");
                        setTurno(false);
                        Mensaje envio = new Mensaje(null, 2, null, 9, false);
                        EnvioJson(envio);
                    }
                    this.contadorSupremo -= 1;
                    especial = 1;
                }


                Carta utilizada = this.cartaSelec.getObject();
                int idCarta = utilizada.getId();

                if (utilizada.getType().equals("h")) {// cartas tipo hechizo
                    if (idCarta == 1) {
                        EnvioCarta ataque = new EnvioCarta(utilizada.getNombre(), utilizada.getAtaque(), utilizada.getMana(),
                                8, utilizada.getType(), utilizada.getId());
                        EnvioJson(ataque);
                        JOptionPane.showMessageDialog(pantallas, "Has activado congelar, tienes un turno extra...");
                        this.congelar += 2;
                        especial += 1;

                    } else if (idCarta == 2) {
                        this.miVida += 250;
                        vidaBar.setValue(miVida);

                    } else if (idCarta == 3) {// poder supremo
                        EnvioCarta ataque = new EnvioCarta(utilizada.getNombre(), utilizada.getAtaque(), utilizada.getMana(),
                                8, utilizada.getType(), utilizada.getId());
                        EnvioJson(ataque);
                        JOptionPane.showMessageDialog(pantallas, "Has activado el poder supremo, puedes usar tres cartas seguidas...");
                        poderSupremo = true;
                        contadorSupremo += 3;
                        especial = 1;

                    }else if (idCarta == 4){ // robar carta
                        JOptionPane.showMessageDialog(pantallas,"Le has robado una carta al oponente!!");
                        EnvioCarta robar = new EnvioCarta(utilizada.getNombre(), 1, utilizada.getMana(),
                                10, utilizada.getType(), utilizada.getId());
                        EnvioJson(robar);
                    }

                } else {//cartas tipo esbirro
                    EnvioCarta ataque = new EnvioCarta(utilizada.getNombre(), utilizada.getAtaque(), utilizada.getMana(),
                            7, utilizada.getType(), utilizada.getId());
                    EnvioJson(ataque);
                }

                RestarMana(utilizada.getMana());
                if (this.miMana + (this.miMana * 0.25) < 1000) {
                    SumarMana();
                } else {
                    this.miMana = 1000;
                    manaField.setText(String.valueOf(this.miMana));
                }


                System.out.println("Mana: " + this.miMana);
                this.mazo.enQueue(utilizada);

                this.cartaSelec = this.mano.getCartaNext();
                this.mano.deleteDato(utilizada);

                if (this.mano.getRef() == null) {
                    this.cartaSelec = null;
                }

                setCartaImage();

                if (especial == 0) {
                    System.out.println("Enviando cambio de turno");
                    Mensaje envio = new Mensaje(null, 0, null, 5, false);
                    EnvioJson(envio);
                    setTurno(false);
                }
            } else {
                JOptionPane.showMessageDialog(pantallas, "No tienes suficiente mana para utilizar esta carta, prueba con otra...");

            }
        }else{
            JOptionPane.showMessageDialog(pantallas, "No tienes cartas debes tomar una del mazo");
        }
    }//GEN-LAST:event_cartaBotonActionPerformed

    private void atrasBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atrasBotonActionPerformed
        // TODO add your handling code here:
        if (this.cartaSelec != null) {
            this.cartaSelec = this.mano.getCartaPrev();
            setCartaImage();
            System.out.println("Carta: "+this.cartaSelec.getObject());
        }else{
            System.out.println("Carta: NUll");
        }
    }//GEN-LAST:event_atrasBotonActionPerformed

    private void mazoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mazoBotonActionPerformed
        // TODO add your handling code here:
        if(this.mano.getSize() + 1 <= 10) {
            Mensaje envio = new Mensaje(null, 0, null, 5, false);
            EnvioJson(envio);
            setTurno(false);
            tomarCarta();
            if (this.miMana + (this.miMana*0.25) < 1000){
                SumarMana();
            }
            else{
                this.miMana = 1000;
                manaField.setText(String.valueOf(this.miMana));
            }
        }else{

            JOptionPane.showMessageDialog(pantallas,"No puede tomar mas cartas (maximo 10)");
        }

    }//GEN-LAST:event_mazoBotonActionPerformed

    private void salirMenuBoton_juegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirMenuBoton_juegoActionPerformed
        // TODO add your handling code here:
        int salir = JOptionPane.showConfirmDialog(null, "¿Estas seguro que quieres salir al menu principal? Perderas la partida");
        switch(salir){
            case JOptionPane.YES_OPTION:
                int valor;
                if(cliente){
                    valor = 2;
                }
                else{
                    valor = 3;
                }
                Mensaje envio = new Mensaje(null, 1, this.username, valor, false);
                EnvioJson(envio);
                this.jugadoresConectadosTextArea_lobby.setText("");
                pantallas.setSelectedIndex(0);

            case JOptionPane.NO_OPTION:
                break;
        }
    }//GEN-LAST:event_salirMenuBoton_juegoActionPerformed

    private void salirBoton_juegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirBoton_juegoActionPerformed
        // TODO add your handling code here:
        int salir = JOptionPane.showConfirmDialog(null, "¿Estas seguro que quieres salir del juego?");
        switch(salir){
            case JOptionPane.YES_OPTION:
                int valor;
                if(cliente){
                    valor = 2;
                }
                else{
                    valor = 3;
                }
                Mensaje envio = new Mensaje(null, 1, this.username, valor, false);
                EnvioJson(envio);
                System.exit(0);

            case JOptionPane.NO_OPTION:
                break;
        }
    }//GEN-LAST:event_salirBoton_juegoActionPerformed

    private void pasarTurnoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasarTurnoBotonActionPerformed
        // TODO add your handling code here:
        int salir = JOptionPane.showConfirmDialog(null, "¿Estas seguro que quieres otorgar tu turno al rival?");
        switch(salir){
            case JOptionPane.YES_OPTION:
                Mensaje envio = new Mensaje(null, 1, this.username, 5, false);
                EnvioJson(envio);
                setTurno(false);
                if (this.miMana + (this.miMana*0.25) < 1000){
                    SumarMana();
                }
                else{
                    this.miMana = 1000;
                    manaField.setText(String.valueOf(this.miMana));
                }

            case JOptionPane.NO_OPTION:
                break;
        }
    }//GEN-LAST:event_pasarTurnoBotonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */


        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuInicial().setVisible(true);
            }
        });


    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adelanteBoton;
    private javax.swing.JButton atrasBoton;
    private javax.swing.JButton cartaBoton;
    private javax.swing.JButton iniciarBoton_lobby;
    private javax.swing.JTextField ipField_lobby;
    private javax.swing.JTextField ipField_unirse;
    private javax.swing.JLabel ipLobbyText_unirse;
    private javax.swing.JLabel ipText_lobby;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel jugadoresConectadosPanel;
    private javax.swing.JLabel jugadoresConectadosText;
    private javax.swing.JTextArea jugadoresConectadosTextArea_lobby;
    private javax.swing.JButton lobbyBoton;
    private javax.swing.JLabel lobbyText_lobby;
    private javax.swing.JTextField manaField;
    private javax.swing.JButton mazoBoton;
    private javax.swing.JLabel monsterName_lobby;
    private javax.swing.JLabel monsterName_menu;
    private javax.swing.JLabel monsterName_unirse;
    private javax.swing.JTextField nombreField;
    private javax.swing.JLabel nombreText;
    private javax.swing.JTabbedPane pantallas;
    private javax.swing.JButton pasarTurnoBoton;
    private javax.swing.JTextField puertoField_lobby;
    private javax.swing.JTextField puertoField_unirse;
    private javax.swing.JLabel puertoLobbyText_unirse;
    private javax.swing.JLabel puertoText_lobby;
    private javax.swing.JButton salirBoton_juego;
    private javax.swing.JButton salirBoton_lobby;
    private javax.swing.JButton salirBoton_menu;
    private javax.swing.JButton salirBoton_unirse;
    private javax.swing.JButton salirMenuBoton_juego;
    private javax.swing.JButton salirMenuBoton_lobby;
    private javax.swing.JButton salirMenuBoton_unirse;
    private javax.swing.JButton unirseBoton;
    private javax.swing.JButton unirseBoton_unirse;
    private javax.swing.JProgressBar vidaBar;
    private javax.swing.JLabel vidaText;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg){

        JsonNode mensaje = null;
        try {
            mensaje = Json.parse(String.valueOf(arg));

            int id = mensaje.get("id").asInt();
            if(id == 1){


                Mensaje recibido = LeerJsonMensaje(mensaje);
                this.jugadoresConectadosTextArea_lobby.append(recibido.getUsername() + "\n");
                this.usuariosConectados ++;
                this.opIP = recibido.getIp();
                this.opPort = recibido.getPort();

                if (recibido.host){
                    Mensaje conexion = new Mensaje(this.miIP,this.miPuerto,this.username + " (host)",1,false);

                    EnvioJson(conexion);
                }
            }
            else if(id == 2){

                Mensaje recibido = LeerJsonMensaje(mensaje);
                this.jugadoresConectadosTextArea_lobby.setText(this.username + " (host)" + "\n");
                this.usuariosConectados -= 1;
                this.opPort = 0;
                this.opIP = null;
                JOptionPane.showMessageDialog(pantallas, mensaje.get("username").asText() + " se deconecto, usted sera enviado al lobby");
                if(mensaje.get("port").asInt() == 1){
                    resetMazo();
                }
                pantallas.setSelectedIndex(2);
                setTurno(false);
            }
            else if (id == 3){

                Mensaje recibido = LeerJsonMensaje(mensaje);
                JOptionPane.showMessageDialog(pantallas, "El host: " + mensaje.get("username").asText() + " se he desconectado, usted sera enviado al menu principal");
                if(mensaje.get("port").asInt() == 1){
                    resetMazo();
                }
                pantallas.setSelectedIndex(0);
                this.jugadoresConectadosTextArea_lobby.setText("");
                this.usuariosConectados = 0;
                this.opPort = 0;
                this.opIP = null;
                setTurno(false);
            }
            else if (id == 4){

                Mensaje recibido = LeerJsonMensaje(mensaje);

                pantallas.setSelectedIndex(3);
                JOptionPane.showMessageDialog(pantallas, "Es el turno de: " + mensaje.get("username").asText());

            }

            else if (id == 5){

                Mensaje recibido = LeerJsonMensaje(mensaje);
                JOptionPane.showMessageDialog(pantallas, "Es tu turno");
                setTurno(true);
            }
            else if(id == 6){
                Mensaje recibido = LeerJsonMensaje(mensaje);
                JOptionPane.showMessageDialog(pantallas, "Felicidades " + this.username + " , has ganado la partida ;)!!!");
                if (cliente){
                    setTurno(false);
                }
                else{
                    setTurno(true);
                }
                resetMazo();
                resetVidaMana();
                pantallas.setSelectedIndex(2);
            }

            else if (id == 7){// ataque de carta
                EnvioCarta recibido = LeerJsonCarta(mensaje);
                CambiarVida(recibido.getAtaque());
                System.out.println("Vida: " + this.miVida);
            }

            else if (id == 8){// lee carta y avisa de la perdida de turnos
                EnvioCarta recibido = LeerJsonCarta(mensaje);
                if (recibido.getIdCarta() == 1){
                    setTurno(false);
                    JOptionPane.showMessageDialog(pantallas, "Congelar ha sido acivado, pierdes un turno...");
                }
                else if(recibido.getIdCarta() == 3){
                    JOptionPane.showMessageDialog(pantallas, "Poder Supremo ha sido acivado, pierdes 3 turnos...");
                    setTurno(false);
                }
                else{
                    JOptionPane.showMessageDialog(pantallas, "Poder Supremo ha sido acivado, pierdes 3 turnos...");
                    setTurno(false);
                }
            }
            else if (id == 9){// verifica la jugabilidad de turnos
                Mensaje recibido = LeerJsonMensaje(mensaje);
                if (recibido.getPort() == 1){ // 1 turno de congelacion
                    setTurno(true);
                }
                else if (recibido.getPort() == 2){ // poder supremo
                    setTurno(true);
                    JOptionPane.showMessageDialog(pantallas, "Ya puedes jugar...");
                }

            }else if (id == 10){ // robar carta
                EnvioCarta robar = LeerJsonCarta(mensaje);
                if (robar.getAtaque() == 1){

                    if (this.cartaSelec != null) {
                        Carta robada = this.mano.getCartaSelec().getObject();
                        JOptionPane.showMessageDialog(pantallas,"El oponente te ha robado tu carta: "+robada.getNombre());
                        this.cartaSelec = this.mano.getCartaNext();
                        this.mano.deleteDato(robada);
                        setCartaImage();

                        EnvioCarta envio = new EnvioCarta(robada.getNombre(), 2, robada.getMana(), 10,
                                robada.getType(), robada.getId());
                        EnvioJson(envio);
                        setTurno(true);
                    }else {
                        Node nodeR = this.mazo.deQueue();
                        Carta robada = nodeR.getObject();
                        JOptionPane.showMessageDialog(pantallas,"El oponente te ha robado tu carta: "+robada.getNombre());
                        EnvioCarta envio = new EnvioCarta(robada.getNombre(), robada.getAtaque(), robada.getMana(), 10,
                                robada.getType(), robada.getId());
                        EnvioJson(envio);
                        setTurno(true);
                    }
                }else{

                    JOptionPane.showMessageDialog(pantallas,"La carta robada fue: " + robar.getNombre());

                    Carta robada = new Carta(robar.getIdCarta(),robar.getTipo(),robar.getNombre(),
                            robar.getAtaque(),robar.getMana());
                    this.mano.insert(robada);
                    this.mano.setCartaSelec(this.mano.find(robada));
                    this.cartaSelec = this.mano.getCartaSelec();
                    setCartaImage();
                }

            }
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }
        
    }
    public static int puerto(){

        Random port_r = new Random();// create random class
        int port = 0;
        while(port <= 9009){ // buscar port hasta que sea mayor que 1500
            port = port_r.nextInt(11999);
        }
        return port;
    }
    public void modificarPantallas(int valor){
        pantallas.setSelectedIndex(valor);
    }

    public void EnvioJson(Object envio){
        JsonNode mensajeNode = Json.toJsonNode(envio);
        try {
            String mensajeCompleto = Json.generateString(mensajeNode, false);

            Client cliente = new Client(this.opPort, mensajeCompleto, this.opIP);
            Thread clienteT = new Thread(cliente);
            clienteT.start();
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }
    }
    public Mensaje LeerJsonMensaje(JsonNode node) throws JsonProcessingException {
        Mensaje conectar = new Mensaje(node.get("ip").asText(),node.get("port").asInt(),
                node.get("username").asText(),1,node.get("host").asBoolean());
        return conectar;
    }

    public EnvioCarta LeerJsonCarta(JsonNode node) throws JsonProcessingException{
        System.out.println("----Leyendo carta----");
        EnvioCarta card = new EnvioCarta(node.get("nombre").asText(), node.get("ataque").asInt(), node.get("mana").asInt(),
                node.get("id").asInt(), node.get("tipo").asText(), node.get("idCarta").asInt());
        System.out.println(card.getNombre() +  card.getAtaque() +  card.getMana() + card.getId() + card.getTipo());
        return card;
    }


    
    public void CambiarVida(int valor){
        this.miVida -= valor;
        vidaBar.setValue(miVida);
        System.out.println("Vida de " + this.username + ": " + this.miVida);
        if (this.miVida <= 1){
            Mensaje perder = new Mensaje(null, 0, this.username, 6, false);
            EnvioJson(perder);
            JOptionPane.showMessageDialog(pantallas, this.username + " , has perdido la partida :c");
            resetMazo();
            if(cliente){
                setTurno(false);
            }
            else{
                setTurno(true);
            }
            resetVidaMana();
            pantallas.setSelectedIndex(2);
        }
    }
    public void SumarMana(){
        this.miMana += (this.miMana * 0.25);
        manaField.setText(String.valueOf(miMana));
    }

    public void RestarMana(int valor){
        this.miMana -= valor;
        manaField.setText(String.valueOf(miMana));
    }

    public void setTurno(Boolean turno){
        mazoBoton.setEnabled(turno);
        cartaBoton.setEnabled(turno);
    }

    public void resetVidaMana(){
        this.miMana = 1000;
        this.miVida = 1000;
        vidaBar.setValue(miVida);
        manaField.setText(String.valueOf(miMana));
    }
  
    public void setMazo(CartasTotal cartas) {
        
        Random random = new Random();
        int index = 0;
        for (int i = 0; i < 20 ;i++ ){
            index = random.nextInt(cartas.getCartastotal().length-1);
            this.mazo.enQueue(cartas.getCartastotal()[index]);
        }
        this.mazo.print();
        crearMano();
    }
    

    public void cargarCartas() throws IOException {

        this.cartasTotal = Json.initializeCartas();
        for(int i = 0; i < 23;i++) {
            System.out.println(this.cartasTotal.getCartastotal()[i].toString());
        }
        setMazo(this.cartasTotal);
    }

    public void crearMano(){
        for(int i = 0; i < 4;i++){
            this.mano.insert(this.mazo.deQueue().getObject());
        }
        this.cartaSelec = this.mano.getRef();
        System.out.println("--------------");
        this.mano.printList();
        System.out.println("--------------");
        this.mazo.print();
    }

    public void setCartaImage(){
        if (this.cartaSelec != null) {
            Carta select = this.cartaSelec.getObject();
            cartaBoton.setIcon(new ImageIcon(this.rutaC + select.getType() + select.getId() + ".png"));
        }else{
            cartaBoton.setIcon(new ImageIcon(this.rutaC +  "back.png"));
        }
    }

    public void tomarCarta(){
        if (this.mano.getSize() <= 10) {
            Carta nueva = this.mazo.deQueue().getObject();
            this.mano.insert(nueva);
            this.cartaSelec = this.mano.find(nueva);
            setCartaImage();
        }else{
            JOptionPane.showMessageDialog(pantallas,"NO puedes tener mas de 10 cartas");
        }
    }
    public void resetMazo(){
        this.mano = new CircularList();
        this.mazo = new Cola();
        setMazo(this.cartasTotal);
    }
}